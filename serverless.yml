org: dnagarpowers
app: social-media-backend
service: social-media-backend
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "ssm:GetParameter"
      Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:*
    
    - Effect: "Allow"
      Action:
        - "secretsmanager:GetSecretValue"
      Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:authSecrets-FPE1gD
  
  httpApi:
    authorizers:
      customAuthorizer:
        type: request
        functionName: authorizerFunc

functions:
  login:
    handler: handlers.login.handler
    events:
      - httpApi:
          path: /login
          method: post
  posts:
    handler: handlers.posts.index
    events:
      - httpApi:
          path: /posts
          method: get
          authorizer: 
            name: customAuthorizer
  
  postsCreate:
    handler: handlers.posts.create
    events:
      - httpApi:
          path: /posts
          method: post
          authorizer: 
            name: customAuthorizer
  
  postsEdit:
    handler: handlers.posts.edit
    events:
      - httpApi:
          path: /posts/{id}
          method: put
          authorizer: 
            name: customAuthorizer

  postsShow:
    handler: handlers.posts.get
    events:
      - httpApi:
          path: /posts/{id}
          method: get
          authorizer: 
            name: customAuthorizer
  
  postsDelete:
    handler: handlers.posts.delete
    events:
      - httpApi:
          path: /posts/{id}
          method: delete
          authorizer: 
            name: customAuthorizer

  postsLike:
    handler: handlers.posts.like
    events:
      - httpApi:
          path: /posts/{id}/like
          method: post
          authorizer: 
            name: customAuthorizer
    
  postsUnlike:
    handler: handlers.posts.unlike
    events:
      - httpApi:
          path: /posts/{id}/unlike
          method: post
          authorizer: 
            name: customAuthorizer
  
  postsComment:
    handler: handlers.posts.comment
    events:
      - httpApi:
          path: /posts/{id}/comment
          method: post
          authorizer: 
            name: customAuthorizer

  usersCreate:
    handler: handlers.users.create
    events:
      - httpApi:
          path: /users
          method: post
  
  usersShow:
    handler: handlers.users.show
    events:
      - httpApi:
          path: /users/{username}
          method: get
          authorizer: 
            name: customAuthorizer
  
  usersEdit:
    handler: handlers.users.edit
    events:
      - httpApi:
          path: /users/{username}
          method: put
          authorizer: 
            name: customAuthorizer

  follow:
    handler: handlers.users.follow
    events:
      - httpApi:
          path: /follow/{username}
          method: post
          authorizer: 
            name: customAuthorizer
  
  unfollow:
    handler: handlers.users.unfollow
    events:
      - httpApi:
          path: /unfollow/{username}
          method: post
          authorizer: 
            name: customAuthorizer

  
  authorizerFunc:
    handler: authorizer.lambda_handler


plugins:
  - serverless-python-requirements
